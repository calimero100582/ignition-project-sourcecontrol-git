{
  "custom": {},
  "params": {
    "project": null
  },
  "permissions": {
    "securityLevels": [
      {
        "children": [],
        "name": "Authenticated"
      }
    ],
    "type": "AllOf"
  },
  "propConfig": {
    "params.project": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 710,
      "width": 864
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "custom": {
              "gitFolder": {
                "folder": "value",
                "project": "value"
              }
            },
            "meta": {
              "name": "dropProject"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 4,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 8
                },
                {
                  "colIndex": 3,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 7
                },
                {
                  "colIndex": 2,
                  "name": "lg",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 9
                }
              ],
              "height": 35
            },
            "propConfig": {
              "custom.submodules": {
                "binding": {
                  "config": {
                    "struct": {
                      "folder": "{session.custom.projectsFolder}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\treturn [x for x in sourcecontrol.getListSubmodule(value.folder, \"\")]",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.options": {
                "binding": {
                  "config": {
                    "path": "this.custom.submodules"
                  },
                  "transforms": [
                    {
                      "code": "\tprojects \u003d system.project.getProjectNames()\n\tprojects.sort()\n\t\n\treturn [{\"value\": \"\", \"label\": \"Global\"}] + [{\"value\": x, \"label\": x + (\" \u003csubmodule\u003e\" if x in value else \"\")} for x in projects]",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              },
              "props.value": {
                "binding": {
                  "config": {
                    "expression": "coalesce({view.params.project},{this.props.options[0].value})"
                  },
                  "type": "expr"
                }
              }
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "git-commit-refresh",
                  "pageScope": true,
                  "script": "\tself.refreshBinding(\"props.options\")",
                  "sessionScope": false,
                  "viewScope": false
                }
              ]
            },
            "type": "ia.input.dropdown"
          },
          {
            "meta": {
              "name": "txtCommitMessage"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 2.5,
                  "rowIndex": 2,
                  "span": 8
                },
                {
                  "colIndex": 3,
                  "name": "md",
                  "order": 2,
                  "rowIndex": 1,
                  "span": 9
                },
                {
                  "colIndex": 2,
                  "name": "lg",
                  "order": 1,
                  "rowIndex": 1,
                  "span": 10
                }
              ],
              "height": 35
            },
            "props": {
              "deferUpdates": false
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "git-commit-revcommit",
                  "pageScope": true,
                  "script": "\tself.props.text \u003d \"\"",
                  "sessionScope": false,
                  "viewScope": false
                }
              ]
            },
            "type": "ia.input.text-field"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(\"git-commit-push\", self.custom.commitPayload)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "btnCommit"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 0,
                  "rowIndex": 3,
                  "span": 8
                },
                {
                  "colIndex": 3,
                  "name": "md",
                  "order": 2,
                  "rowIndex": 2,
                  "span": 7
                },
                {
                  "colIndex": 2,
                  "name": "lg",
                  "order": 2,
                  "rowIndex": 2,
                  "span": 7
                }
              ],
              "height": 38
            },
            "propConfig": {
              "custom.commitPayload": {
                "binding": {
                  "config": {
                    "struct": {
                      "authorEmail": "{session.props.auth.user.email}",
                      "authorName": "coalesce({session.props.auth.user.firstName},{session.props.auth.user.userName}) + if(isNull({session.props.auth.user.lastName}), \"\", \" \" + {session.props.auth.user.lastName})",
                      "files": "{../tblFiles.props.data}",
                      "folder": "{session.custom.projectsFolder}",
                      "message": "{../txtCommitMessage.props.text}",
                      "project": "{../dropProject.props.value}",
                      "submodules": "{../dropProject.custom.submodules}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t\n\tfiles \u003d [f[\"value\"][\"file\"] for f in value[\"files\"] if f[\"value\"][\"status\"] !\u003d \"Missing\"]\n\tfiles.sort()\n\t\n\tremovedFiles \u003d [f[\"value\"][\"file\"] for f in value[\"files\"] if f[\"value\"][\"status\"] \u003d\u003d \"Missing\"]\n\tremovedFiles.sort()\n\t\n\treturn {\n\t\t\"message\": value.message,\n\t\t\"authorEmail\": value.authorEmail,\n\t\t\"authorName\": value.authorName,\n\t\t\"folder\": value.folder,\n\t\t\"project\": value.project,\n\t\t\"files\": files,\n\t\t\"removedFiles\": removedFiles,\n\t\t\"isSubmodule\": value.project in value.submodules\n\t}",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.enabled": {
                "binding": {
                  "config": {
                    "struct": {
                      "files": "{../tblFiles.props.data}",
                      "message": "{../txtCommitMessage.props.text}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\treturn len(value.files) \u003e 0 and len(value.message) \u003e 0",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "text": "Commit"
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "git-commit-push",
                  "pageScope": true,
                  "script": "\trevcommit \u003d sourcecontrol.Commit(payload.folder, payload.project if payload.isSubmodule else \"\", payload.files, payload.removedFiles, payload.authorName, payload.authorEmail, payload.message)\n\tsystem.perspective.sendMessage(\"git-commit-revcommit\", {\"commit\": revcommit})",
                  "sessionScope": false,
                  "viewScope": false
                }
              ]
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "tblFiles"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1.5,
                  "rowIndex": 5,
                  "span": 12
                },
                {
                  "colIndex": 3,
                  "name": "md",
                  "order": 2,
                  "rowIndex": 3,
                  "span": 9
                },
                {
                  "colIndex": 2,
                  "name": "lg",
                  "order": 2,
                  "rowIndex": 3,
                  "span": 10
                }
              ],
              "height": 185
            },
            "propConfig": {
              "props.data": {
                "binding": {
                  "config": {
                    "struct": {
                      "folder": "{session.custom.projectsFolder}",
                      "project": "{../dropProject.props.value}",
                      "submodules": "{../dropProject.custom.submodules}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\tsubmodule \u003d value.project if value.project in value.submodules else \"\"\n\tproject \u003d value.project if not submodule else \"\"\n\t\n\tstatus \u003d sourcecontrol.Status(value.folder, submodule, project)\n\t\n\tfileStatus \u003d {\n\t\t#\"UncommitedChanged\": list(status.getUncommittedChanges()),\n\t\t\"Added\": list(status.getAdded()),\n\t\t\"Changed\": list(status.getChanged()),\n\t\t\"Conflicting\": list(status.getConflicting()),\n\t\t#\"Ignored\": list(status.getIgnoredNotInIndex()),\n\t\t\"Missing\": list(status.getMissing()),\n\t\t\"Modified\": list(status.getModified()),\n\t\t\"Removed\": list(status.getRemoved()),\n\t\t\"Untracked\": list(status.getUntracked())\n\t}\n\t\t\n\tfiles \u003d {}\n\tfor key in fileStatus:\n\t\tfor file in fileStatus[key]:\n\t\t\tif submodule or (project and file.startswith(project)) or (not project and not \"/\" in file):\n\t\t\t\tfiles[file] \u003d key\n\t\n\tresult \u003d []\n\tfor file in files:\n\t\tresult.append({\"file\": file, \"status\": files[file]})\n\t\t\n\tdiff \u003d [{\"value\": file, \"style\": {\"classes\": \"git_filestatus git_filestatus_\" + file[\"status\"]}} for file in result]\n\tdiff.sort()\n\t\n\treturn diff",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                },
                "onChange": {
                  "enabled": null,
                  "script": "\tself.props.selection.data \u003d None"
                }
              }
            },
            "props": {
              "cells": {
                "style": {
                  "paddingLeft": 5
                }
              },
              "columns": [
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "file",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": "File"
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "string",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": "",
                    "textOverflow": "clip"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "status",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": "Status"
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": ""
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": 15
                }
              ],
              "pager": {
                "bottom": false,
                "initialOption": 99999999
              },
              "selection": {
                "data": null,
                "selectedColumn": "file",
                "selectedRow": 22
              }
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "git-commit-revcommit",
                  "pageScope": true,
                  "script": "\tself.refreshBinding(\"props.data\")",
                  "sessionScope": false,
                  "viewScope": false
                }
              ]
            },
            "type": "ia.display.table"
          },
          {
            "meta": {
              "name": "tblChanges"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 7,
                  "span": 12
                },
                {
                  "colIndex": 3,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 4,
                  "span": 9
                },
                {
                  "colIndex": 2,
                  "name": "lg",
                  "order": 1.5,
                  "rowIndex": 4,
                  "span": 10
                }
              ],
              "height": 261
            },
            "propConfig": {
              "props.data": {
                "binding": {
                  "config": {
                    "struct": {
                      "file": "{../tblFiles.props.selection.data[0].file}",
                      "folder": "{session.custom.projectsFolder}",
                      "project": "{../dropProject.props.value}",
                      "submodules": "{../dropProject.custom.submodules}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\tif not value.file:\n\t\treturn []\n\t\t\n\tsubmodule \u003d value.project if value.project in value.submodules else \"\"\n\tproject \u003d value.project if not submodule else \"\"\n\t\n\tdiff \u003d sourcecontrol.Diff(value.folder, submodule, value.file)\n\t\n\tchanges \u003d [{\"value\": {\"changes\": d}, \"style\": {\"classes\": \"difference/added\" if d.startswith(\"+\") else \"difference/removed\" if d.startswith(\"-\") else \"difference/changes\" if d.startswith(\"@@\") else \"\"}} for d in diff.split(\u0027\\n\u0027)]\n\t\n\treturn changes",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "cells": {
                "style": {
                  "overflow": "visible"
                }
              },
              "columns": [
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "patch",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "justify": "left",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "string",
                  "resizable": false,
                  "sort": "none",
                  "sortable": false,
                  "strictWidth": false,
                  "style": {
                    "classes": "",
                    "overflow": "visible"
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                }
              ],
              "enableHeader": false,
              "pager": {
                "bottom": false,
                "initialOption": 9999999
              },
              "resizeMode": "fixed",
              "rows": {
                "height": "20px",
                "highlight": {
                  "enabled": false
                },
                "striped": {
                  "enabled": false
                },
                "style": {
                  "fontFamily": "monospace",
                  "overflow": "visible",
                  "whiteSpace": "pre"
                }
              },
              "selection": {
                "enableRowSelection": false
              },
              "style": {
                "overflow": "visible"
              }
            },
            "type": "ia.display.table"
          },
          {
            "meta": {
              "name": "lblProject"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 0,
                  "rowIndex": 0,
                  "span": 4
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 0.5,
                  "rowIndex": 0,
                  "span": 3
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 0.5,
                  "rowIndex": 0,
                  "span": 2
                }
              ]
            },
            "propConfig": {
              "position.height": {
                "binding": {
                  "config": {
                    "path": "../dropProject.position.height"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "textAlign": "right"
              },
              "text": "Project"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "lblCommitMessage"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1.5,
                  "rowIndex": 2,
                  "span": 4
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 1.5,
                  "rowIndex": 1,
                  "span": 3
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 0.5,
                  "rowIndex": 1,
                  "span": 2
                }
              ]
            },
            "propConfig": {
              "position.height": {
                "binding": {
                  "config": {
                    "path": "../txtCommitMessage.position.height"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "textAlign": "right"
              },
              "text": "Commit Message"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "lblFiles"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 0.5,
                  "rowIndex": 4,
                  "span": 2
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 3,
                  "span": 3
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 1,
                  "rowIndex": 3,
                  "span": 2
                }
              ],
              "height": 35
            },
            "props": {
              "style": {
                "textAlign": "right"
              },
              "text": "Files"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(\"git-commit-refresh\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "btnRefresh"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 2.5,
                  "rowIndex": 1,
                  "span": 12
                },
                {
                  "colIndex": 10,
                  "name": "md",
                  "order": 1.5,
                  "rowIndex": 0,
                  "span": 2
                },
                {
                  "colIndex": 11,
                  "name": "lg",
                  "order": 1.5,
                  "rowIndex": 0,
                  "span": 1
                }
              ]
            },
            "propConfig": {
              "position.height": {
                "binding": {
                  "config": {
                    "path": "../dropProject.position.height"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "text": "Refresh"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "lblDiff"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 6,
                  "span": 2
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 0.5,
                  "rowIndex": 4,
                  "span": 3
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 0.5,
                  "rowIndex": 4,
                  "span": 2
                }
              ],
              "height": 35
            },
            "props": {
              "style": {
                "textAlign": "right"
              },
              "text": "Diff"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tsystem.perspective.sendMessage(\"git-index-push\", self.custom.payload)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "btnPush"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 8,
                  "name": "sm",
                  "order": 0.5,
                  "rowIndex": 3,
                  "span": 4
                },
                {
                  "colIndex": 10,
                  "name": "md",
                  "order": 3,
                  "rowIndex": 2,
                  "span": 2
                },
                {
                  "colIndex": 9,
                  "name": "lg",
                  "order": 3,
                  "rowIndex": 2,
                  "span": 3
                }
              ],
              "height": 38
            },
            "propConfig": {
              "custom.payload": {
                "binding": {
                  "config": {
                    "struct": {
                      "folder": "{session.custom.projectsFolder}",
                      "project": "{../dropProject.props.value}",
                      "submodules": "{../dropProject.custom.submodules}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\treturn {\n\t\t\"folder\": value.folder,\n\t\t\"submodule\": value.project if value.project in value.submodules else \"\"\n\t}",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "text": "Push"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "ColumnContainer"
        },
        "position": {
          "height": "100%",
          "width": "100%"
        },
        "props": {
          "breakpoints": [
            {
              "minWidth": 0,
              "name": "sm"
            },
            {
              "minWidth": 640,
              "name": "md"
            },
            {
              "minWidth": 990,
              "name": "lg"
            }
          ],
          "gutters": {
            "horizontal": 5
          },
          "style": {
            "padding": 5
          }
        },
        "type": "ia.container.column"
      },
      {
        "meta": {
          "name": "lblJGitNotFound"
        },
        "position": {
          "height": "100%",
          "width": "100%"
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "path": "this.props.text"
              },
              "transforms": [
                {
                  "code": "\ttry:\n\t\timport org.eclipse.jgit.api.Git\n\t\treturn False\n\texcept:\n\t\treturn True",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "backgroundColor": "var(--neutral-20)",
            "fontSize": "2em",
            "opacity": 0.8,
            "textAlign": "center"
          },
          "text": "To use this, you first need to add JGit to the available libraries in your gateway"
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "git-request-login",
          "pageScope": true,
          "script": "\tsystem.perspective.openPopup(\"dlg-git-login\", \"dialogs/login\", params \u003d payload, title \u003d \"Login\", draggable \u003d False, resizable \u003d False, modal \u003d True)",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "git-index-push",
          "pageScope": true,
          "script": "\tif not (hasattr(payload, \"username\") or hasattr(payload, \"password\")) and sourcecontrol.requireLogin(payload.folder, payload.submodule):\n\t\tsystem.perspective.sendMessage(\"git-request-login\", {\"message\":\"git-index-push\", \"payload\": payload})\n\telse:\n\t\tsourcecontrol.Push(payload.folder, payload.submodule, payload)\n\t\tsystem.perspective.sendMessage(\"git-setup-refresh\")",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.coord"
  }
}