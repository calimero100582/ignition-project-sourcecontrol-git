{
  "custom": {},
  "params": {
    "message": "",
    "payload": ""
  },
  "propConfig": {
    "params.message": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.payload": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 180,
      "width": 455
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "txtPassword"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 1,
                  "span": 12
                },
                {
                  "colIndex": 6,
                  "name": "md",
                  "order": 1.5,
                  "rowIndex": 0,
                  "span": 6
                },
                {
                  "colIndex": 6,
                  "name": "lg",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 6
                }
              ],
              "height": 40
            },
            "props": {
              "placeholder": "password"
            },
            "type": "ia.input.password-field"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tfrom collections import namedtuple\n\t\n\tpayload \u003d {}\n\tpayload.update(self.custom.payload.originalPayload)\n\t\n\tif self.custom.payload.save:\n\t\thost \u003d sourcecontrol.getRemoteHost(self.custom.payload.originalPayload.folder, self.custom.payload.originalPayload.submodule)\n\t\tnetrc.AddOrUpdateEntry(self.session.custom.netrcFile, host, self.custom.payload.loginPayload.username, self.custom.payload.loginPayload.password)\n\telse:\n\t\tpayload.update(self.custom.payload.loginPayload)\n\t\n\tpayload \u003d namedtuple(\u0027Struct\u0027, payload.keys())(*payload.values())\n\t\n\tsystem.perspective.sendMessage(self.view.params.message, payload)\n\tsystem.perspective.closePopup(\"dlg-git-login\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "btnLogin"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 3,
                  "span": 12
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 2,
                  "span": 12
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 1,
                  "rowIndex": 2,
                  "span": 12
                }
              ],
              "height": 40
            },
            "propConfig": {
              "custom.payload": {
                "binding": {
                  "config": {
                    "struct": {
                      "loginPayload": {
                        "password": "{../txtPassword.props.text}",
                        "username": "{../txtUsername.props.text}"
                      },
                      "originalPayload": "{view.params.payload}",
                      "save": "{../chkSaveCredentials.props.selected}"
                    },
                    "waitOnAll": true
                  },
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "text": "Login"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "txtUsername"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 12
                },
                {
                  "colIndex": 0,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 0,
                  "span": 6
                },
                {
                  "colIndex": 0,
                  "name": "lg",
                  "order": 0.5,
                  "rowIndex": 0,
                  "span": 6
                }
              ],
              "height": 40
            },
            "props": {
              "placeholder": "username"
            },
            "type": "ia.input.text-field"
          },
          {
            "meta": {
              "name": "chkSaveCredentials"
            },
            "position": {
              "breakpoints": [
                {
                  "colIndex": 0,
                  "name": "sm",
                  "order": 1,
                  "rowIndex": 2,
                  "span": 12
                },
                {
                  "colIndex": 6,
                  "name": "md",
                  "order": 1,
                  "rowIndex": 1,
                  "span": 6
                },
                {
                  "colIndex": 6,
                  "name": "lg",
                  "order": 0.5,
                  "rowIndex": 1,
                  "span": 5
                }
              ],
              "height": 30
            },
            "props": {
              "text": "Save Credentials to Server"
            },
            "type": "ia.input.checkbox"
          }
        ],
        "meta": {
          "name": "sizing"
        },
        "position": {
          "height": 1,
          "width": 1
        },
        "type": "ia.container.column"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "mode": "percent",
      "style": {
        "margin": 10
      }
    },
    "type": "ia.container.coord"
  }
}